// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:
    // DMux16(sel=instruction[15], in=instruction, a=ains, b=cins, b[3]=);

    // A may be set by A instruction, or by C instruction
    // C instruction uses cins[5] to determine whether to set A
    Not(in=instruction[15], out=Aload1);
    And(a=instruction[15], b=instruction[5], out=Aload2);
    Or(a=Aload1, b=Aload2, out=Aload);
    Mux16(sel=instruction[15], a=instruction, b=ALUout, out=Ain);
    ARegister(in=Ain, load=Aload, out=A, out[0..14]=addressM);

    // D can only be set by C instruction, saving ALUout
    // C instruction uses cins[4] to determine whether to set D
    And(a=instruction[15], b=instruction[4], out=Dload);
    DRegister(in=ALUout, load=Dload, out=D);

    // C instruction uses cins[3] to determine whether to set M
    // If M needs setting, A will be the address
    // writeM=cins[3];
    // addressM=A;
    And(a=instruction[15], b=instruction[3], out=writeM);

    // ALU inputs are D and A/M, determined by cins[12]
    // If instruction[15]=0, ALUout is unuseful, so we don't care its value
    Mux16(sel=instruction[12], a=A, b=inM, out=ALUin);
    ALU(x=D, y=ALUin, zx=instruction[11], nx=instruction[10],
        zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6],
        out=ALUout, out=outM,
        zr=zr, ng=ng);
    
    // Jump where?
    // ps = !(zr or ng)
    Or(a=zr, b=ng, out=nps);
    Not(in=nps, out=ps);
    And(a=instruction[2], b=ng, out=jmp1);
    And(a=instruction[1], b=zr, out=jmp2);
    And(a=instruction[0], b=ps, out=jmp3);
    Or(a=jmp1, b=jmp2, out=jmp12);
    Or(a=jmp12, b=jmp3, out=jmp123);
    And(a=instruction[15], b=jmp123, out=jmp);

    // Fetch next instruction
    // If jump, PC load A
    // else, PC inc
    PC(reset=reset, load=jmp, inc=true, in=A, out[0..14]=pc); 
}
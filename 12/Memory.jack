// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {
    static Array memory;
    static Array freeList;

    static int heapBottom;

    /** Initializes the class. */
    function void init() {
        let memory = 0;
        let freeList = 2048;
        let heapBottom = 16384;

        let freeList[0] = 14336; // 16384 - 2048
        let freeList[1] = null;
        return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        return memory[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        let memory[address] = value;
        return;
    }

    function int bestFit(int size) {
        var Array prevBestBlock, curBlock, prevBlock;
        var int bestSize;

        let prevBestBlock = heapBottom;
        let bestSize = 14337;
        let curBlock = freeList;
        let prevBlock = null;

        while (~(curBlock = null)) {
            if ((curBlock[0] > size) & (curBlock[0] < bestSize)) {
                let prevBestBlock = prevBlock;
                let bestSize = curBlock[0];
            }
            let prevBlock = curBlock;
            let curBlock = curBlock[1];
        }

        return prevBestBlock;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
        // I don't know if I programmed correctly
        // The test may not test all cases
        var Array prevBlock, foundBlock;
        var int leftLen;

        let prevBlock = Memory.bestFit(freeList);
        if (prevBlock = heapBottom) {
            return -1;
        } else {
            if (prevBlock = null) {
                let foundBlock = freeList;
                let freeList = Memory._alloc(foundBlock, size);
            } else {
                let foundBlock = prevBlock[1];
                let prevBlock[1] = Memory._alloc(foundBlock, size);
            }
        }
        return foundBlock + 1;
    }

    // return next free block, to complete freeList
    function int _alloc(Array foundBlock, int size) {
        var Array nextBlock;
        var int leftLen;
    
        let leftLen = foundBlock[0] - (size + 1);
        if (leftLen < 2) { // 1 for size, 1 for a word
            // alloc all
            return foundBlock[1];
        } else {
            let foundBlock[0] = size + 1;
            let nextBlock = foundBlock + size + 1;
            let nextBlock[0] = leftLen;
            let nextBlock[1] = foundBlock[1];
            return nextBlock;
        }
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
        var Array segment, freeBlock;
        var int length;

        let segment = o - 1;
        let length = o[-1];
        let freeBlock = Memory.findFree(o);

        if (freeBlock = null) {
            if ((segment + length) = freeList) { // adjacent
                let segment[0] = freeList[0] + length;
                let segment[1] = freeList[1];
                let freeList = segment;
            } else {
                let segment[1] = freeList;
                let freeList = segment;
            }
        } else {
            if ((freeBlock + length) = segment) { // adjacent
                let freeBlock[0] = freeBlock[0] + length;
                let segment = freeBlock;
                let length = segment[0];
            } else {
                let segment[1] = freeBlock[1];
                let freeBlock[1] = segment;
            }

            let freeBlock = segment[1]; // next free block
            if (freeBlock = heapBottom) {
                return;
            }
    
            if ((segment + length) = freeBlock) {
                let segment[0] = segment[0] + freeBlock[0];
                let segment[1] = freeBlock[1];
            }
        }

        return;
    }

    function Array findFree(Array o) {
        var Array freeBlock;
        
        if(freeList > o) {
            return null;
        }
        
        let freeBlock = freeList;
        while(~(freeBlock[1] = null) & (freeBlock[1] < o)) {
            let freeBlock = freeBlock[1];
        }
        return freeBlock;
    }
}
